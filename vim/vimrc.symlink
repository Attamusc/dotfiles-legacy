" Enable Sytax highlighting for pretty colors
syntax enable

" Vundle setup for plugin management
set nocompatible

filetype off
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

Bundle 'gmarik/vundle'

" Plugins
Bundle 'scrooloose/nerdcommenter'
Bundle 'tpope/vim-rails'
Bundle 'tpope/vim-git'
Bundle 'tpope/vim-unimpaired'
Bundle 'tpope/vim-surround'
Bundle 'tpope/vim-repeat'
Bundle 'scrooloose/nerdtree'
Bundle 'mattn/zencoding-vim'

" Language stuff
Bundle 'gberenfield/sjl-slimv'
Bundle 'cakebaker/scss-syntax.vim'
Bundle 'pangloss/vim-javascript'
Bundle 'wavded/vim-stylus'
Bundle 'digitaltoad/vim-jade'
Bundle 'kchmck/vim-coffee-script'
Bundle 'othree/html5.vim'

filetype plugin indent on

" Various sets to make stuff better
set visualbell
set t_vb=
set hidden
set number
set showcmd
set autoindent
set smartindent
set cursorline
set splitright
set formatoptions=qrn1
set cmdheight=2
set laststatus=2
set scrolloff=5
set switchbuf=useopen
set backspace=indent,eol,start

" Use the same symbols as TextMate for tabstops and EOLs
set listchars=tab:▸\ ,eol:¬,trail:⌴
set ts=2 sts=2 sw=2 expandtab

set noswapfile
set nobackup
set undofile
set undodir=~/tmp/vim/undo
if !isdirectory(expand(&undodir))
    call mkdir(expand(&undodir), "p")
endif

set showmatch
set incsearch
set hlsearch
set foldlevelstart=0

" Better Completion
set complete=.,w,b,u,t
set completeopt=longest,menuone,preview

set wildmenu
set wildmode=list:longest

set wildignore+=.hg,.git,.svn
set wildignore+=*.aux,*.out,*.toc
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest
set wildignore+=*.spl
set wildignore+=*.sw?
set wildignore+=*.DS_Store
set wildignore+=*.luac
set wildignore+=migrations
set wildignore+=*.pyc
set wildignore+=*.orig
set wildignore+=classes
set wildignore+=lib

set statusline=%<%f\ (%{&ft})\ %-4(%m%)%=%-19(%3l,%02c%03V%)

let mapleader=","
let base16colorspace=256  " Access colors present in 256 colorspace

let g:lisp_rainbow = 1
let g:slimv_repl_split = 4
let vimclojure#HighlightBuiltins = 1
let vimclojure#ParenRainbow = 1
let vimclojure#WantNailgun = 0

if has('gui_running')
    set guifont=Source\ Code\ Pro:h13
    set background=dark
    colorscheme base16-ocean
    set go-=T
    set go-=l
    set go-=L
    set go-=r
    set go-=R
else
    set background=dark
    colorscheme base16-eighties
endif

" Shortcut to rapidly toggle `set list`
nnoremap <leader>l :set list!<CR>

" Only do this part when compiled with support for autocommands
if has("autocmd")
  augroup common
    au!

    " Jump to last cursor position unless it's invalid or in an event handler
    au BufWinEnter *
      \ if line("'\"") > 0 && line("'\"") <= line("$") |
      \   exe "normal g`\"" |
      \ endif

    " Cursor Highlight in Insert mode is annoying
    au WinLeave,InsertEnter * set nocursorline
    au WinEnter,InsertLeave * set cursorline

    " I like having the option of folding, but I don't like everything
    " folded when I open the file
    au BufWinEnter,BufRead * normal zR
  augroup END

  augroup git
    au!

    au BufNewFile,BufRead *gitconfig* setfiletype gitconfig

  augroup vimrcEx
    au!

    " Save the buffer when focus is lost
    au FocusLost * :wa

    " Auto-source the .vimrc file when it is saved
    au BufWritePost *vimrc* source $MYVIMRC

    " Syntax of these languages is fussy over tabs Vs spaces
    au FileType make setlocal ts=8 sts=8 sw=8 noexpandtab
    au FileType yaml setlocal ts=2 sts=2 sw=2 expandtab
    au FileType ruby setlocal ts=2 sts=2 sw=2 expandtab
    au FileType python setlocal ts=4 sts=4 sw=4 expandtab

    " Customisations based on personal preferences
    au FileType html setlocal ts=2 sts=2 sw=2 expandtab
    au FileType css setlocal ts=2 sts=2 sw=2 expandtab

    au BufNewFile,BufRead *.zsh* setfiletype zsh
  augroup END
  
  augroup html
    au!

    au BufNewFile,BufRead *.hbs setfiletype html
    au BufNewFile,BufRead *.handlebars setfiletype html
    au BufNewFile,BufRead *.ejs setfiletype html
  augroup END
  augroup java
      au!

      au FileType java setlocal foldmethod=marker
      au FileType java setlocal foldmarker={,}

      " Make {<cr> insert a pair of brackets in such a way that the cursor is correctly
      " positioned inside of them AND the following code doesn't get unfolded.
      au Filetype java inoremap <buffer> {<CR> {}<left><CR><tab><CR><ESC>kA
  augroup END

  augroup javascript
      au!

      au FileType javascript setlocal foldmethod=marker
      au FileType javascript setlocal foldmarker={,}
      au FileType javascript setlocal ts=2 sts=2 sw=2 expandtab

      " Make {<cr> insert a pair of brackets in such a way that the cursor is correctly
      " positioned inside of them AND the following code doesn't get unfolded.
      au Filetype javascript inoremap <buffer> {<CR> {}<left><CR><tab><CR><ESC>kA
  augroup END

  augroup css
    au!

    au BufNewFile,BufRead *.styl setfiletype stylus

    au Filetype css,sass,scss,less,stylus setlocal foldmethod=marker
    au Filetype css,sass,scss,less,stylus setlocal foldmarker={,}
    au Filetype css,sass,scss,less,stylus setlocal omnifunc=csscomplete#CompleteCSS
    au Filetype css,sass,scss,less,stylus setlocal iskeyword+=-

    au BufNewFile,BufRead *.css,*.scss,*.less, inoremap {<CR> {}<left><CR><tab><CR><ESC>kA
  augroup END

  augroup groovy
    au!

    au BufNewFile,BufRead *.gradle setfiletype groovy
endif

" Super Awesome fold text taken from @sjl
function! MyFoldText() " {{{
    let line = getline(v:foldstart)

    let nucolwidth = &fdc + &number * &numberwidth
    let windowwidth = winwidth(0) - nucolwidth - 3
    let foldedlinecount = v:foldend - v:foldstart

    " expand tabs into spaces
    let onetab = strpart('          ', 0, &tabstop)
    let line = substitute(line, '\t', onetab, 'g')

    let line = strpart(line, 0, windowwidth - 2 -len(foldedlinecount))
    let fillcharcount = windowwidth - len(line) - len(foldedlinecount)
    return line . '…' . repeat(" ",fillcharcount) . foldedlinecount . '…' . ' '
endfunction " }}}
set foldtext=MyFoldText()

" Context sensitive tab completion taken from @garybernhardt's dotfiles
function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-p>"
    endif
endfunction

" WTF vim?
map j gj
map k gk

nnoremap <leader>tw mz:%s/\s\+$//<cr>:let @/=''<cr>`z

inoremap <tab> <c-r>=InsertTabWrapper()<cr>
inoremap <s-tab> <c-n>

" 'Bubble' the text up or down a line
" These bindings require @tpope's unimpaired plugin
nmap <C-Up> [e
nmap <C-Down> ]e

" Make changing tags in HTML super easy
nmap <leader>ct cst<

nnoremap <s-tab> <<
nnoremap <tab> >>
vnoremap <s-tab> <gv
vnoremap <tab> >gv

nnoremap <CR> :nohlsearch<CR>

nnoremap <space> za
vnoremap <space> za

" To enforce good habits...
map <Left> <Nop>
map <Right> <Nop>
map <Up> <Nop>
map <Down> <Nop>

" Quick access to vimrc for on-the-fly customizations
nmap <leader>ev :tabedit $MYVIMRC<CR>

map <leader>bi :BundleInstall<CR>

map <leader>nf :NERDTreeFind<CR>
map <leader>n :NERDTreeToggle<CR>
map <leader>/ <plug>NERDCommenterToggle<CR>
imap <leader>/ <esc><plug>NERDCommenterToggle<CR>i

nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l

" uppercase/lowercase a word
nmap <leader>uc mQviwU`Q
nmap <leader>lc mQviwu`Q
