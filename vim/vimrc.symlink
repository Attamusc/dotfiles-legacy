runtime macros/matchit.vim

" Enable Sytax highlighting for pretty colors
syntax enable

set nocompatible
filetype off

highlight clear SignColumn

let mapleader=","

" Vundle {{{
" Vundle setup for plugin management
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" Bundles {{{
Bundle "gmarik/vundle"
" Utilities {{{
Bundle "alpaca-tc/vim-unite-watson.vim"
"Bundle "Blackrush/vim-gocode"
Bundle "bling/vim-airline"
Bundle "gre/play2vim"
Bundle 'junegunn/vim-easy-align'
Bundle "jgdavey/tslime.vim"
Bundle "kana/vim-textobj-user"
Bundle "kien/ctrlp.vim"
Bundle "marijnh/tern_for_vim"
Bundle "majutsushi/tagbar"
Bundle "mattn/emmet-vim"
Bundle "nelstrom/vim-textobj-rubyblock"
Bundle "Raimondi/delimitMate"
Bundle "scrooloose/nerdtree"
Bundle "scrooloose/nerdcommenter"
Bundle "scrooloose/syntastic"
Bundle "Shougo/neomru.vim"
Bundle "Shougo/unite.vim"
Bundle "Shougo/vimproc"
Bundle "thoughtbot/vim-rspec"
Bundle "tommcdo/vim-exchange"
Bundle "tpope/vim-bundler"
Bundle "tpope/vim-endwise"
Bundle "tpope/vim-fugitive"
Bundle "tpope/vim-rake"
Bundle "tpope/vim-repeat"
Bundle "tpope/vim-surround"
Bundle "tpope/vim-unimpaired"
Bundle "Valloric/MatchTagAlways"
Bundle "Valloric/YouCompleteMe"

" Load last so other, more prominent, signs are not overwritten
Bundle "mhinz/vim-signify"
" }}}
" Langs {{{
Bundle "cakebaker/scss-syntax.vim"
Bundle "derekwyatt/vim-scala"
Bundle "elixir-lang/vim-elixir"
Bundle "elzr/vim-json"
Bundle "fatih/vim-go"
Bundle "hhvm/vim-hack"
Bundle "jelera/vim-javascript-syntax"
Bundle "juvenn/mustache.vim"
Bundle "kchmck/vim-coffee-script"
Bundle "othree/html5.vim"
Bundle "pangloss/vim-javascript"
Bundle "tpope/vim-liquid"
Bundle "tpope/vim-markdown"
Bundle "tpope/vim-rails"
Bundle "vim-ruby/vim-ruby"
Bundle "wavded/vim-stylus"
" }}}
" Colors {{{
Bundle "morhetz/gruvbox"
Bundle "nanotech/jellybeans.vim"
Bundle "jonathanfilip/vim-lucius"
Bundle "w0ng/vim-hybrid"
Bundle "reedes/vim-colors-pencil"
Bundle "zeis/vim-kolor"
" }}}
" }}}

filetype plugin indent on
" }}}
" General Settings {{{
set visualbell
set t_vb=
set hidden
set rnu
set showcmd
set autoindent
set smartindent
set cursorline
set splitright
set modelines=1
set synmaxcol=400
set formatoptions=qrn1
set cmdheight=2
set laststatus=2
set scrolloff=5
set switchbuf=useopen
set backspace=indent,eol,start
set autoread
set t_Co=256
set tags=tags;/

" Use the same symbols as TextMate for tabstops and EOLs
set listchars=tab:▸\ ,eol:¬,trail:·
set ts=2 sts=2 sw=2 expandtab

set noswapfile
set nobackup

set showmatch
set incsearch
set hlsearch

" Better Completion
set omnifunc=syntaxcomplete#Complete
set complete=.,w,b,u,t
set completeopt+=longest,menuone,preview

hi Pmenu  guifg=#000000 guibg=#F8F8F8 ctermfg=black ctermbg=Lightgray
hi PmenuSbar  guifg=#8A95A7 guibg=#F8F8F8 gui=NONE ctermfg=darkcyan ctermbg=lightgray cterm=NONE
hi PmenuThumb  guifg=#F8F8F8 guibg=#8A95A7 gui=NONE ctermfg=lightgray ctermbg=darkcyan cterm=NONE

set wildmenu
set wildmode=list:longest

set wildignore+=.hg/,.git/,.svn/
set wildignore+=*.aux,*.out,*.toc
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest
set wildignore+=*.spl
set wildignore+=*.sw?
set wildignore+=*.DS_Store
set wildignore+=*.luac
set wildignore+=migrations
set wildignore+=*.pyc
set wildignore+=*.orig
set wildignore+=*/classes/*,*/tmp*,*/node_modules,*/vendor/*ruby

set statusline=%<%f\ (%{&ft})\ %-4(%m%)%=%-19(%3l,%02c%03V%)
" }}}
" Plugin Settings {{{
" vim-json {{{
let g:vim_json_syntax_conceal = 0
" }}}
" vim-airline {{{
let g:airline_powerline_fonts = 1

let g:jellybeans_overrides = {
\    'Todo': { 'guifg': 'f0f000',
\              'ctermfg': 'Yellow',
\              'attr': 'bold' },
\}
" }}}
" NerdTree {{{
" Show hidden files in NerdTree
let NERDTreeShowHidden=1
" }}}
" TagBar {{{
" ---CoffeeScript---
if executable('coffeetags')
  let g:tagbar_type_coffee = {
        \ 'ctagsbin' : 'coffeetags',
        \ 'ctagsargs' : '',
        \ 'kinds' : [
        \ 'f:functions',
        \ 'o:object',
        \ ],
        \ 'sro' : ".",
        \ 'kind2scope' : {
        \ 'f' : 'object',
        \ 'o' : 'object',
        \ }
        \ }
endif
" }}}
" ctrl-p {{{
let g:ctrlp_dotfiles = 1
let g:ctrlp_match_window_bottom = 0
let g:ctrlp_custom_ignore = '\v[\/]((\.(git|hg|svn))|target|project|node_modules)$'
" }}}
" Unite {{{
let g:unite_winheight = 10
let g:unite_data_directory='/Users/Sean/.vim/.cache/unite'
let g:unite_enable_start_insert=1
let g:unite_source_history_yank_enable=1
let g:unite_source_rec_max_cache_files=30000
let g:unite_source_file_rec_max_cache_files=30000
let g:unite_prompt='» '
let g:unite_source_grep_command='ag'
let g:unite_source_grep_default_opts='--nocolor --nogroup --column'
let g:unite_source_grep_recursive_opt=''

call unite#set_profile('files', 'smartcase', 1)
call unite#custom_source('file_rec,file_rec/async,file_mru,file,buffer,grep',
      \ 'ignore_pattern', join([
      \ '\.git/',
      \ '\.hg/',
      \ '\.svn/',
      \ 'node_modules/',
      \ 'vendor/ruby',
      \ 'classes/',
      \ ], '\|'))

call unite#filters#matcher_default#use(['matcher_fuzzy'])
call unite#filters#sorter_default#use(['sorter_length'])

call unite#custom#source('file_mru,file_rec,file_rec/async,grepocate',
        \ 'max_candidates', 30000)
" }}}
" vim-signify {{{
let g:signify_update_on_focusgained = 1
" }}}
" Syntastic {{{
let g:syntastic_enable_highlighting = 0
let g:syntastic_always_populate_loc_list=1

let g:syntastic_error_symbol = '✗'
let g:syntastic_warning_symbol = '⚠ '
let g:syntastic_style_error_symbol = '✗'
let g:syntastic_style_warning_symbol = '⚠ '

" Ignore HTML files since templating breaks it
let g:syntastic_mode_map = {
  \ 'mode': 'active',
  \ 'active_filetypes': [],
  \ 'passive_filetypes': ['html', 'scala'] }

" Checkers {{{
" --JavaScript--
let g:syntastic_javascript_checkers=['jshint', 'jscs']

" --CSS--
let g:syntastic_css_checkers=[]

" --PHP--
let g:syntastic_php_checkers=['php', 'phpcs']
let g:syntastic_php_phpcs_args='--standard=Behance --report=csv'

" --Ruby--
let g:syntastic_ruby_checkers=['rubocop']
" }}}
" }}}

" gocode {{{
let g:gocode_gofmt_tabs = ' -tabs=true'
let g:gocode_gofmt_tabwidth = ' -tabwidth=4'
" }}}

" YouCompleteMe {{{
let g:ycm_autoclose_preview_window_after_completion = 1
" }}}

" vim-rspec {{{
" vim-rspec command so that we send commands to tmux using vim-tslime
let g:rspec_command = 'call Send_to_Tmux("bundle exec rspec {spec}\n")'
" }}}

if has('gui_running')
  set guifont=Source\ Code\ Pro\ Light\ For\ Powerline:h13
  set background=dark
  colorscheme hybrid
  let g:airline_theme='hybrid'
  set go-=T
  set go-=l
  set go-=L
  set go-=r
  set go-=R
  " Remap CtrlP because muscle memory's a bitch
  let g:ctrlp_map = '<D-t>'
else
  set background=dark
  colorscheme hybrid
  let g:airline_theme='hybrid'
  let g:ctrlp_map = '<C-p>'
endif
" }}}
" Autocommands {{{
" Only do this part when compiled with support for autocommands
if has("autocmd")
  augroup common
    au!

    " Jump to last cursor position unless it's invalid or in an event handler
    au BufWinEnter *
      \ if line("'\"") > 0 && line("'\"") <= line("$") |
      \   exe "normal g`\"" |
      \ endif

    " Cursor Highlight in Insert mode is annoying
    au WinLeave,InsertEnter * set nocursorline
    au WinEnter,InsertLeave * set cursorline
  augroup END

  augroup git
    au!

    au BufNewFile,BufRead *gitconfig* setfiletype gitconfig

  augroup vimrcEx
    au!

    " Save the buffer when focus is lost
    au FocusLost * :wa

    " Auto-source the .vimrc file when it is saved
    au BufWritePost *vimrc* source $MYVIMRC

    " Syntax of these languages is fussy over tabs Vs spaces
    au FileType make setlocal ts=8 sts=8 sw=8 noexpandtab
    au FileType yaml setlocal ts=2 sts=2 sw=2 expandtab
    au FileType ruby setlocal ts=2 sts=2 sw=2 expandtab
    au FileType python setlocal ts=4 sts=4 sw=4 expandtab

    " Customisations based on personal preferences
    au FileType html setlocal ts=2 sts=2 sw=2 expandtab
    au FileType css setlocal ts=2 sts=2 sw=2 expandtab

    au BufNewFile,BufRead *.zsh* setfiletype zsh
  augroup END

  augroup html
    au!

    au FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
    au FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

    au BufNewFile,BufRead *.ejs setfiletype html
  augroup END

  augroup java
    au!

    au FileType java setlocal foldmethod=marker
    au FileType java setlocal foldmarker={,}
    au BufWritePre *.java call StripTrailing()
  augroup END

  augroup scala
    au!

    au BufWritePre *.scala call StripTrailing()
  augroup END

  augroup json
    au!

    au BufNewFile,BufRead .tern-project setfiletype json
  augroup end

  augroup javascript
      au!

      au BufNewFile,BufRead .jshintrc setfiletype javascript
      au BufNewFile,BufRead *.njs setfiletype javascript

      "au FileType javascript setlocal foldmethod=marker
      "au FileType javascript setlocal foldmarker={,}
      au FileType javascript setlocal ts=2 sts=2 sw=2 expandtab

      " Tern Bindings
      au FileType javascript inoremap <C-t> <esc>:TernType<cr>a
      au FileType javascript nnoremap <C-t> :TernType<cr>

      au FileType javascript noremap <C-d> <esc>:TernDef<cr>
      au FileType javascript noremap <C-d> :TernDef<cr>

      au BufWritePre *.js,*.njs call StripTrailing()
  augroup END

  augroup coffee
    au!

    au BufWritePre *.coffee call StripTrailing()
  augroup END

  augroup css
    au!

    au BufNewFile,BufRead *.styl setfiletype stylus
    au BufNewFile,BufRead *.roo setfiletype stylus

    au FileType css setlocal omnifunc=csscomplete#CompleteCSS
    au Filetype css,sass,scss,less,stylus setlocal foldmethod=marker
    au Filetype css,sass,scss,less,stylus setlocal foldmarker={,}
    au Filetype css,sass,scss,less,stylus setlocal omnifunc=csscomplete#CompleteCSS
    au Filetype css,sass,scss,less,stylus setlocal iskeyword+=-
  augroup END

  augroup groovy
    au!
    au BufNewFile,BufRead *.gradle set ft=groovy
  augroup END

  augroup go
    au!
    au FileType go setlocal ts=4 sts=4 sw=4
    au BufWritePre *.go call StripTrailing()
  augroup END

  augroup ruby
    au!

    au FileType ruby setlocal omnifunc=rubycomplete#Complete

    au BufNewFile,BufRead Rakefile,Guardfile,Vagrantfile set ft=ruby
    au BufWritePre *.rb call StripTrailing()
  augroup END

  augroup php
    au!

    au BufWritePre *.php call StripTrailing()
  augroup END

  augroup python
    au!

    autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
  augroup END
endif
" }}}
" Functions {{{
" thanks to http://vimcasts.org/e/4
function! StripTrailing()
  let previous_search=@/
  let previous_cursor_line=line('.')
  let previous_cursor_column=col('.')
  %s/\s\+$//e
  let @/=previous_search
  call cursor(previous_cursor_line, previous_cursor_column)
endfunction

" Super Awesome fold text taken from @sjl
function! MyFoldText() " {{{
    let line = getline(v:foldstart)

    let nucolwidth = &fdc + &number * &numberwidth
    let windowwidth = winwidth(0) - nucolwidth - 3
    let foldedlinecount = v:foldend - v:foldstart

    " expand tabs into spaces
    let onetab = strpart('          ', 0, &tabstop)
    let line = substitute(line, '\t', onetab, 'g')

    let line = strpart(line, 0, windowwidth - 2 -len(foldedlinecount))
    let fillcharcount = windowwidth - len(line) - len(foldedlinecount)
    return line . '…' . repeat(" ",fillcharcount) . foldedlinecount . '…' . ' '
endfunction " }}}
set foldtext=MyFoldText()

" Make Unite's window behave more like a preview window
function! s:unite_settings() "{{{
  nmap <buffer> Q <plug>(unite_exit)
  nmap <buffer> <esc> <plug>(unite_exit)
  imap <buffer> <esc> <plug>(unite_exit)
  imap <silent><buffer><expr> <C-x> unite#do_action('split')
  imap <silent><buffer><expr> <C-v> unite#do_action('vsplit')
  imap <silent><buffer><expr> <C-t> unite#do_action('tabopen')
  imap <buffer> <C-j> <down>
  imap <buffer> <C-k> <up>
  " Here so I don't constantly lookup the default key binding
  "imap <buffer> <C-l> <plug>(unite_redraw)
endfunction "}}}
autocmd FileType unite call s:unite_settings()

function! RemoveRubyEval() range
  let begv = a:firstline
  let endv = a:lastline
  normal Hmt
  set lz
  execute ":" . begv . "," . endv . 's/\s*# \(=>\|!!\).*$//e'
  normal 'tzt`s
  set nolz
  redraw
endfunction

function! SearchDash()
  let s:browser = "/usr/bin/open"
  let s:wordUnderCursor = expand("<cword>")

  " Get the filetype (everything after the first ., for special cases
  " such as index.html.haml or abc.css.scss.erb)
  let s:fileType = substitute(expand("%"),"^[^.]*\.","",1)

  " Match it and set the searchType
  if match(s:fileType, "js") != -1
    let s:searchType = "js:"
  elseif match(s:fileType, "css") != -1
    let s:searchType = "css:"
  elseif match(s:fileType, "html") != -1
    let s:searchType = "html:"
  elseif match(s:fileType, "rb") != -1
    let s:searchType = "rb:"
  elseif match(s:fileType, "php") != -1
    let s:searchType = "php:"
  elseif match(s:fileType, "py") != -1
    let s:searchType = "python:"
  else
    let s:searchType = ""
  endif

  " Run it
  let s:url = "dash://".s:searchType.s:wordUnderCursor
  let s:cmd ="silent ! " . s:browser . " " . s:url
  execute s:cmd
  redraw!
endfunction
" }}}
" Keybindings {{{
" Unite keybindings
"nnoremap <D-t> :Unite -buffer-name=files file_rec/async:!<cr>
nnoremap <leader>aa :Unite -no-quit -buffer-name=search grep:.<cr>

nnoremap <space><space> :Unite -toggle -auto-resize -buffer-name=mixed file_rec/async buffer file_mru bookmark<cr>
nnoremap <space>r :Unite -toggle -auto-resize -buffer-name=files file_mru<cr>
nnoremap <space>y :Unite -buffer-name=yanks history/yank<cr>
nnoremap <space>l :Unite -auto-resize -buffer-name=line line<cr>
nnoremap <space>b :Unite -auto-resize -buffer-name=buffers buffer<cr>
nnoremap <space>m :Unite -auto-resize -buffer-name=mappings mapping<cr>
nnoremap <space>s :Unite -quick-match buffer<cr>
nnoremap <space>w :Unite -buffer-name=watson_current watson/current_file<CR>
nnoremap <space>d :Unite -buffer-name=watson_dirty watson/dirty<CR>

" For fast and east bundler installing
nnoremap <Leader>bi :BundleInstall<cr>

" Show TagBar
nnoremap <Leader>ts :TagbarToggle<CR>

" Shortcut to rapidly toggle `set list`
nnoremap <leader>lt :set list!<CR>

" Quickly show a diff of the current file
nnoremap <leader>gd :Gdiff<CR>

" WTF vim?
map j gj
map k gk

" 'Bubble' the text up or down a line
" These bindings require @tpope's unimpaired plugin
nmap <D-Up> [e
nmap <D-Down> ]e

" Make changing tags is HTML super easy
nmap <leader>ct cst<

nnoremap <s-tab> <<
nnoremap <tab> >>
vnoremap <s-tab> <gv
vnoremap <tab> >gv

nnoremap <leader>hw :nohlsearch<CR>

nnoremap <space> za
vnoremap <space> za

" To enforce good habits...
map <Left> <Nop>
map <Right> <Nop>
map <Up> <Nop>
map <Down> <Nop>

" Vim-Easy-Align
vnoremap <silent> <Enter> :EasyAlign<Enter>

" For rsyncing
nmap <leader>rn :silent !rsync -rltz --executability --filter=':- .gitignore' -e ssh . sbelsky@dev17.be.lan:/var/www/vhosts/network/sandbox/<CR>

" Quick access to vimrc for on-the-fly customizations
nmap <leader>ev :tabedit $MYVIMRC<CR>

" For saving to feel like Emacs and every other editor
nnoremap <leader>s :w<CR>

" Make switching tabs less shitty
nnoremap <leader>k :tabn<CR>
nnoremap <leader>j :tabp<CR>

"nmap <leader>ss :%s/\s\+$//<CR><CR>``

" Search and replace current word under cursor
"noremap <Leader>sw :%s/\<<C-r><C-w>\>//g<Left><Left>

map <leader>n :NERDTreeToggle<CR>
map <leader>/ <plug>NERDCommenterToggle<CR>
imap <leader>/ <esc><plug>NERDCommenterToggle<CR>

nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l

" uppercase/lowercase a word
nmap <leader>uc mQviwU`Q
nmap <leader>lc mQviwu`Q

" xmpfilter mappings for poorman's insta-repl
nmap <silent> <leader>ra mzggVG!xmpfilter -a<cr>'z
imap <silent> <leader>ra <ESC><leader>ra

" add # => marker
vmap <silent> <leader>rm !xmpfilter -m<cr>
nmap <silent> <leader>rm V<leader>rm
imap <silent> <leader>rm <ESC><leader>rma

" remove # => marker
vmap <silent> <leader>rd ms:call RemoveRubyEval()<CR>
nmap <silent> <leader>rd V<leader>rd
imap <silent> <leader>rd <ESC><leader>rda

map <leader>rt :call RunCurrentSpecFile()<CR>
map <leader>rs :call RunNearestSpec()<CR>
map <leader>rl :call RunLastSpec()<CR>
map <leader>ra :call RunAllSpecs()<CR>

" Dash searching integration
map <leader>d :call SearchDash()<CR>
" }}}
