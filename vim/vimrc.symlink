runtime macros/matchit.vim

" Enable Sytax highlighting for pretty colors
syntax enable

if !has('nvim')
  set nocompatible
endif

filetype off

" vim-plug {{{
" vim-plug setup for plugin management
call plug#begin('~/.vim/plugged')

" Bundles {{{
" Utilities {{{
Plug 'AndrewRadev/splitjoin.vim'
Plug 'craigemery/vim-autotag'
" Plug 'edkolev/tmuxline.vim'
Plug 'guns/vim-clojure-highlight'
Plug 'guns/vim-clojure-static'
Plug 'guns/vim-sexp'
Plug 'gre/play2vim'
Plug 'honza/vim-snippets'
Plug 'janko-m/vim-test'
Plug 'joereynolds/gtags-scope'
Plug 'junegunn/limelight.vim'
Plug 'junegunn/vim-easy-align'
Plug 'junegunn/vim-pseudocl'
Plug 'junegunn/vim-fnr'
Plug 'jgdavey/tslime.vim'
Plug 'justinmk/vim-sneak'
Plug 'kana/vim-textobj-user'
Plug 'kennethzfeng/vim-raml'
Plug 'kien/rainbow_parentheses.vim'
Plug 'malkomalko/projections.vim'
Plug 'majutsushi/tagbar'
Plug 'mattn/emmet-vim'
Plug 'nelstrom/vim-textobj-rubyblock'
Plug 'Quramy/tsuquyomi'
Plug 'Raimondi/delimitMate'
Plug 'ryanoasis/vim-devicons'
Plug 'scrooloose/nerdtree'
Plug 'scrooloose/nerdcommenter'
Plug 'SirVer/ultisnips'
Plug 'Shougo/neomru.vim'
Plug 'Shougo/vimproc', { 'do': 'make' }
Plug 'terryma/vim-expand-region'
Plug 'tommcdo/vim-exchange'
Plug 'tpope/vim-bundler'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-fireplace'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-leiningen'
Plug 'tpope/vim-rake'
Plug 'tpope/vim-rbenv'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-sexp-mappings-for-regular-people'
Plug 'tpope/vim-unimpaired'
Plug 'Valloric/MatchTagAlways'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'wellle/targets.vim'
Plug 'wincent/ferret'
Plug 'wting/rust.vim'
Plug 'guns/vim-clojure-highlight'

" Load last so other, more prominent, signs are not overwritten
" Plug 'mhinz/vim-signify'

Plug 'airblade/vim-gitgutter'
" }}}
" Langs {{{
Plug 'cakebaker/scss-syntax.vim'
Plug 'derekwyatt/vim-scala'
Plug 'ekalinin/Dockerfile.vim'
Plug 'elixir-lang/vim-elixir'
Plug 'elzr/vim-json'
Plug 'fatih/vim-go'
Plug 'Glench/Vim-Jinja2-Syntax'
Plug 'HerringtonDarkholme/yats.vim'
Plug 'isRuslan/vim-es6'
Plug 'joshtronic/php.vim'
Plug 'juvenn/mustache.vim'
Plug 'kchmck/vim-coffee-script'
Plug 'leafgarland/typescript-vim'
Plug 'mxw/vim-jsx'
Plug 'othree/es.next.syntax.vim'
Plug 'othree/html5.vim'
Plug 'othree/yajs.vim'
Plug 'pangloss/vim-javascript'
Plug 'posva/vim-vue'
Plug 'tpope/vim-liquid'
Plug 'tpope/vim-markdown'
Plug 'tpope/vim-rails'
Plug 'vim-ruby/vim-ruby'
Plug 'wavded/vim-stylus'
Plug 'xsbeats/vim-blade'
" }}}
" Colors {{{
Plug 'chriskempson/base16-vim'
Plug 'drewtempelmeyer/palenight.vim'
Plug 'kaicataldo/material.vim'
Plug 'kristijanhusak/vim-hybrid-material'
Plug 'nanotech/jellybeans.vim'
Plug 'trusktr/seti.vim'
Plug 'tyrannicaltoucan/vim-deep-space'
Plug 'tyrannicaltoucan/vim-quantum'
" }}}

if has('nvim')
  Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
  Plug 'junegunn/fzf.vim'

  " Async Linting tools
  " Plug 'benekastah/neomake'
  Plug 'w0rp/ale'
  
  " Async autocomplete library
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
  Plug 'Shougo/echodoc.vim'

  " autocompletion plugins for deoplete
  Plug 'carlitux/deoplete-ternjs', { 'do': 'npm install -g tern' }
  Plug 'awetzel/elixir.nvim', { 'do': 'yes \| ./install.sh' }
  Plug 'mhartington/nvim-typescript', { 'do': './install.sh' }
  Plug 'fishbullet/deoplete-ruby'
  Plug 'sebastianmarkow/deoplete-rust'
else
  Plug 'scrooloose/syntastic'
  Plug 'ctrlpvim/ctrlp.vim'
  Plug 'Valloric/YouCompleteMe', { 'do': './install.py --all' }
endif
" }}}
" }}}


call plug#end()
filetype plugin indent on

let mapleader=","
" }}}
" General Settings {{{
set visualbell
set hidden
set nu
set showcmd
set autoindent
set smartindent
set cursorline
set splitright
set autoread
set exrc
set secure
set t_vb=
set modelines=1
set synmaxcol=400
set formatoptions=qrn1
set cmdheight=2
set laststatus=2
set scrolloff=5
set switchbuf=useopen
set backspace=indent,eol,start
set t_Co=256
set tags=./tags;/
set cscopetag "seach both cscopes and the tags file
set clipboard=unnamed
set lazyredraw
set autowrite

" Key delays are just the worst
set timeoutlen=1000
set ttimeoutlen=0

if (has("termguicolors"))
 set termguicolors
endif

" Split settings that make way more sense
set splitbelow
set splitright

" folding
set foldlevel=20

" Use the same symbols as TextMate for tabstops and EOLs
set listchars=tab:▸\ ,eol:¬,trail:·

set ts=2 sts=2 sw=2 expandtab

set noswapfile
set nobackup

set showmatch
set incsearch
set hlsearch

" Better Completion
set omnifunc=syntaxcomplete#Complete
set complete=.,w,b,u,t
set completeopt+=longest,menuone,preview

set wildmenu
set wildmode=list:longest

set wildignore+=.hg/,.git/,.svn/
set wildignore+=*.aux,*.out,*.toc
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest
set wildignore+=*.spl
set wildignore+=*.sw?
set wildignore+=*.DS_Store
set wildignore+=Godeps/
set wildignore+=*.luac
set wildignore+=migrations
set wildignore+=*.pyc
set wildignore+=*.orig
set wildignore+=*/classes/*,*/tmp*

set statusline=%<%f\ (%{&ft})\ %-4(%m%)%=%-19(%3l,%02c%03V%)
" }}}
" Plugin Settings {{{
" base16 {{{
let base16colorspace=256
" }}}
" fzf.vim {{{
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-h': 'split',
  \ 'ctrl-v': 'vsplit' }

let g:fzf_command_prefix = 'Fzf'
let g:fzf_layout = { 'down': '~25%' }
" }}}
" ctrl-p {{{		
let g:ctrlp_open_new_file = 'r'
let g:ctrlp_dont_split = 'NERD'
let g:ctrlp_show_hidden = 1
let g:ctrlp_switch_buffer = 1
" }}}
" vim-go {{{
let g:go_fmt_fail_silently = 1

let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
" }}}
" vim-json {{{
let g:vim_json_syntax_conceal = 0
" }}}
" vim-jsx {{{
let g:jsx_ext_required = 0
" }}}
" vim-airline {{{
" let g:airline_left_sep=''
" let g:airline_right_sep=''
let g:airline_powerline_fonts = 1

let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_buffers = 0
let g:airline#extensions#tabline#tab_min_count = 2

let g:airline#extensions#tmuxline#enabled = 1
" }}

" tmuxline {{{
let g:tmuxline_powerline_separators = 1

let g:tmuxline_preset = {
      \'a'    : '#S',
      \'b'    : '#W',
      \'win'  : '#I #W',
      \'cwin' : '#I #W',
      \'x'    : '%a',
      \'y'    : '%R',
      \'z'    : '#H'}
" }}}
" jellybeans syntax overrides
let g:jellybeans_overrides = {
\    'Todo': { 'guifg': 'f0f000',
\              'ctermfg': 'Yellow',
\              'attr': 'bold' },
\}
" }}}
" NerdTree {{{
" Show hidden files in NerdTree
let NERDTreeShowHidden=1
" }}}
" NerdCommenter {{{
" Add a padding space to comments
let NERDSpaceDelims=1
" }}}
" TagBar {{{
" ---CoffeeScript---
if executable('coffeetags')
  let g:tagbar_type_coffee = {
        \ 'ctagsbin' : 'coffeetags',
        \ 'ctagsargs' : '',
        \ 'kinds' : [
        \ 'f:functions',
        \ 'o:object',
        \ ],
        \ 'sro' : ".",
        \ 'kind2scope' : {
        \ 'f' : 'object',
        \ 'o' : 'object',
        \ }
        \ }
endif
" }}}
" ultisnips {{{
let g:UltiSnipsExpandTrigger="<c-k>"
let g:UltiSnipsJumpForwardTrigger="<c-k>"
let g:UltiSnipsJumpBackwardTrigger="<c-j>"
" }}}
" vim-signify {{{
let g:signify_update_on_focusgained = 1
let g:signify_sign_overwrite = 0
" }}}
" The Silver Search overrides {{{
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -i --nocolor --nogroup --hidden
    \ --ignore Godeps
    \ --ignore .git
    \ --ignore .svn
    \ --ignore .hg
    \ --ignore .DS_Store
    \ -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif
" }}}
" ale {{{
let g:ale_sign_error = '✗'
let g:ale_sign_warning = '>>'

let g:ale_lint_on_text_changed = 'never'
let g:ale_echo_msg_format = '%linter%: %s'

let g:airline#extensions#ale#enabled = 1

let g:ale_linters = {
  \ 'javascript': ['eslint', 'flow'],
  \ 'typescript': ['eslint', 'tslint', 'tsserver'],
  \ 'vue': ['eslint', 'stylelint'],
  \ 'php': ['phpcs'],
  \ 'html': []
\ }
let g:ale_linter_aliases = {'vue': ['css', 'javascript']}

let g:ale_fixers = {
  \ 'javascript': ['prettier'],
  \ 'css': ['prettier']
\ }
let g:ale_fix_on_save = 1

let g:ale_php_phpcs_standard = '/Users/atta/Projects/Work/php-sniffs/Behance/ruleset.xml'
" }}}
" neomake {{{
let g:neomake_javascript_enabled_makers = ['eslint_d']
let g:neomake_typescript_enabled_makers = ['eslint_d']
let g:neomake_jsx_enabled_makers = ['eslint_d']
let g:neomake_vue_enabled_makers = ['eslint_d']
" }}}
" Syntastic {{{
let g:syntastic_aggregate_errors = 1
let g:syntastic_enable_highlighting = 0
let g:syntastic_always_populate_loc_list=1

let g:syntastic_error_symbol = '✗'
let g:syntastic_warning_symbol = '>>'
let g:syntastic_style_error_symbol = '✗'
let g:syntastic_style_warning_symbol = '>>'

" Ignore HTML files since templating breaks it
let g:syntastic_mode_map = {
  \ 'mode': 'active',
  \ 'active_filetypes': [],
  \ 'passive_filetypes': ['html', 'scala'] }

" Checkers {{{
" --JavaScript--
let g:syntastic_javascript_checkers=['eslint']

" --TypeScript--
let g:tsuquyomi_disable_quickfix = 1
let g:syntastic_typescript_checkers = ['tsuquyomi']

" --CSS--
let g:syntastic_css_checkers=[]

" --Sass--
let g:syntastic_sass_checkers=['scss_lint']

" --PHP--
let g:syntastic_php_checkers=['php', 'phpcs']
let g:syntastic_php_phpcs_args='--standard=Behance --report=csv'

" --Ruby--
let g:syntastic_ruby_checkers=['rubocop']

" --Go--
let g:syntastic_go_checkers=['golint', 'gofmt', 'govet']
" }}}

" gocode {{{
let g:gocode_gofmt_tabs = ' -tabs=true'
let g:gocode_gofmt_tabwidth = ' -tabwidth=4'
" }}}

" deoplete {{{
let g:deoplete#enable_at_startup = 1
let g:deoplete#auto_completion_start_length = 1
let g:deoplete#file#enable_buffer_path = 1
let g:deoplete#omni_patterns = {}

let g:deoplete#omni_patterns.javascript = '[^. *\t]\.\w*'

let g:deoplete#sources#rust#racer_binary='/Users/atta/.cargo/bin/racer'
let g:deoplete#sources#rust#rust_source_path='/usr/local/rust/src'
" }}}

" YouCompleteMe {{{
let g:ycm_autoclose_preview_window_after_completion = 1

if !exists("g:ycm_semantic_triggers")
  let g:ycm_semantic_triggers = {}
endif
let g:ycm_semantic_triggers['typescript'] = ['.']
" }}}

" vim-test {{{
if has('nvim')
  let g:test#strategy = 'neovim'
else
  let g:test#strategy = 'tslime'
endif
" }}}

" vim-rhubarb {{{
let g:RHUBARB_TOKEN=$GH_TOKEN
" }}}
" }}}

if has('gui_running')
  " gui specific settings
  " set guifont=M+\ 1m\ light:h14
  " set guifont=Sudo:h18
  set guifont=mononoki:h16

  set background=dark

  " let g:enable_bold_font = 1
  " colorscheme hybrid_material
  " let g:airline_theme="hybrid"

  let g:deepspace_italics = 1
  colorscheme deep-space
  let g:airline_theme="deep_space"

  " hybrid_material is insane and doens't use traditional green = additon / red = subtraction
  " coloring. Address that with color linking
  " hi! link diffRemoved Special
  " hi! link diffAdded String

  hi SignColumn ctermfg=243 ctermbg=235 cterm=NONE guifg=#757777 guibg=NONE gui=NONE
  hi SignifySignAdd ctermfg=188 ctermbg=64 cterm=bold guifg=#43800a guibg=NONE gui=bold
  hi SignifySignDelete ctermfg=88 ctermbg=NONE cterm=NONE guifg=#870505 guibg=NONE gui=NONE
  hi SignifySignChange ctermfg=188 ctermbg=23 cterm=NONE guifg=#6189D4 guibg=NONE gui=NONE

  set go-=T
  set go-=l
  set go-=L
  set go-=r
  set go-=R

  let g:ctrlp_map = '<D-t>'
else
  set background=dark

  let g:material_theme_style = "palenight"
  let g:material_terminal_italics = 1
  colorscheme material

  let g:airline_theme="material"

  " hybrid_material is insane and doens't use traditional green = additon / red = subtraction
  " coloring. Address that with color linking
  " hi! link diffRemoved Special
  " hi! link diffAdded String

  hi SignColumn ctermfg=243 ctermbg=235 cterm=NONE guifg=#757777 guibg=NONE gui=NONE
  hi SignifySignAdd ctermfg=188 ctermbg=64 cterm=bold guifg=#43800a guibg=NONE gui=bold
  hi SignifySignDelete ctermfg=88 ctermbg=NONE cterm=NONE guifg=#870505 guibg=NONE gui=NONE
  hi SignifySignChange ctermfg=188 ctermbg=23 cterm=NONE guifg=#6189D4 guibg=NONE gui=NONE

  hi NeomakeErrorSign ctermfg=204 guifg=#dd6880
  hi NeomakeWarningSign ctermfg=221 guifg=#ddbd71
  hi NeomakeMessageSign ctermfg=75 guifg=#76a2e1
  hi NeomakeInfoSign ctermfg=236 guifg=#263238

  if has('nvim')
    " Fzf Commands
    " Only neovim can open fzf searches in a split terminal windows. Macvim requires the
    " search to happen in an iterm window and the full screen shift if really unpleasant,
    " so we only bind these when we're using neovim
    nnoremap <C-p> :FzfFiles<CR>
    nnoremap <leader>a :FzfAg<CR>
    nnoremap <space>a :FzfAg<space>
  else
    let g:ctrlp_map = '<C-p>'
  end
endif
" Autocommands {{{
" Only do this part when compiled with support for autocommands
if has("autocmd")
  augroup common
    au!

    " Jump to last cursor position unless it's invalid or in an event handler
    au BufWinEnter *
      \ if line("'\"") > 0 && line("'\"") <= line("$") |
      \   exe "normal g`\"" |
      \ endif

    " Cursor Highlight in Insert mode is annoying
    au WinLeave,InsertEnter * set nocursorline
    au WinEnter,InsertLeave * set cursorline

    " Autoclose preview window on autocomplete finish
    autocmd CompleteDone * pclose!

    " Run neomake on buffer write
    " autocmd! BufWritePost * Neomake
  augroup END

  augroup git
    au!

    au BufNewFile,BufRead *gitconfig* setfiletype gitconfig

  augroup vimrcEx
    au!

    " Save the buffer when focus is lost
    au FocusLost * :wa

    " Auto-source the .vimrc file when it is saved
    au BufWritePost *vimrc* source $MYVIMRC
    " Auto-source the init.vim file when it is saved
    au BufWritePost *init.vim* source $MYVIMRC

    " Syntax of these languages is fussy over tabs Vs spaces
    au FileType make setlocal ts=8 sts=8 sw=8 noexpandtab
    au FileType yaml setlocal ts=2 sts=2 sw=2 expandtab
    au FileType ruby setlocal ts=2 sts=2 sw=2 expandtab
    au FileType python setlocal ts=4 sts=4 sw=4 expandtab

    " Customisations based on personal preferences
    au FileType css setlocal ts=2 sts=2 sw=2 expandtab

    au BufNewFile,BufRead *.zsh* setfiletype zsh
    au BufNewFile,BufRead .owners setfiletype yaml
  augroup END

  augroup html
    au!

    au FileType html setlocal ts=2 sts=2 sw=2 expandtab

    au FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
    au FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

    au BufNewFile,BufRead *.ejs setfiletype html
  augroup END

  augroup clojure
    au!

    au Filetype clojure RainbowParenthesesActivate
    au FileType clojure RainbowParenthesesLoadRound
    au FileType clojure RainbowParenthesesLoadSquare
    au FileType clojure RainbowParenthesesLoadBraces

    au Filetype clojure let b:loaded_delimitMate=1
  augroup END

  augroup java
    au!

    au FileType java setlocal foldmethod=marker
    au FileType java setlocal foldmarker={,}
    au BufWritePre *.java call StripTrailing()
  augroup END

  augroup scala
    au!

    au BufWritePre *.scala call StripTrailing()
  augroup END

  augroup json
    au!

    au FileType json setlocal foldmethod=syntax

    au BufNewFile,BufRead .tern-project setfiletype json
    au BufNewFile,BufRead .jshintrc setfiletype json
    au BufNewFile,BufRead .jscsrc setfiletype json
  augroup end

  augroup javascript
      au!

      au BufNewFile,BufRead *.njs setfiletype javascript

      au FileType javascript setlocal foldmethod=marker
      au FileType javascript setlocal foldmarker={,}
      au FileType javascript setlocal ts=2 sts=2 sw=2 expandtab

      " Tern Bindings
      au FileType javascript inoremap <C-t> <esc>:TernType<cr>a
      au FileType javascript nnoremap <C-t> :TernType<cr>

      au FileType javascript noremap <C-d> <esc>:TernDef<cr>
      au FileType javascript noremap <C-d> :TernDef<cr>

      au FileType javascript inoremap <C-t> <esc>:TernType<cr>a
      au FileType javascript nnoremap <C-t> :TernType<cr>
      au FileType javascript noremap <C-d> <esc>:TernDef<cr>
      au FileType javascript noremap <C-d> :TernDef<cr>

      au BufWritePre *.js,*.njs call StripTrailing()
  augroup END

  augroup typescript
    au!

    au FileType typescript setlocal completeopt+=menu,preview
  augroup END

  augroup coffee
    au!

    au BufWritePre *.coffee call StripTrailing()
  augroup END

  augroup css
    au!

    au BufNewFile,BufRead *.styl setfiletype stylus
    au BufNewFile,BufRead *.roo setfiletype stylus

    au BufNewFile,BufRead *.focss setfiletype scss

    au FileType css setlocal omnifunc=csscomplete#CompleteCSS
    au Filetype css,sass,scss,less,stylus setlocal foldmethod=marker
    au Filetype css,sass,scss,less,stylus setlocal foldmarker={,}
    au Filetype css,sass,scss,less,stylus setlocal omnifunc=csscomplete#CompleteCSS
    au Filetype css,sass,scss,less,stylus setlocal iskeyword+=-
  augroup END

  augroup groovy
    au!
    au BufNewFile,BufRead *.gradle set ft=groovy
  augroup END

  augroup go
    au!
    au FileType go setlocal ts=4 sts=4 sw=4

    au BufWritePre *.go :silent GoImports
    au BufWritePre *.go call StripTrailing()
  augroup END

  augroup ruby
    au!

    au FileType ruby setlocal omnifunc=rubycomplete#Complete

    au BufNewFile,BufRead Rakefile,Guardfile,Vagrantfile set ft=ruby
    au BufWritePre *.rb call StripTrailing()

    " xmpfilter mappings for poorman's insta-repl
    "nmap <silent> <leader>ra mzggVG!xmpfilter -a<cr>'z
    "imap <silent> <leader>ra <ESC><leader>ra

    " add # => marker
    "vmap <silent> <leader>rm !xmpfilter -m<cr>
    "nmap <silent> <leader>rm V<leader>rm
    "imap <silent> <leader>rm <ESC><leader>rma

    " remove # => marker
    "vmap <silent> <leader>rd ms:call RemoveRubyEval()<CR>
    "nmap <silent> <leader>rd V<leader>rd
    "imap <silent> <leader>rd <ESC><leader>rda

    " Quick, vertical 'goto file' (gf) to compliment <c-w>f (horizontal split)
    au FileType ruby nnoremap <leader>f <plug>RailsVSplitFind
  augroup END

  augroup eruby
    au FileType eruby let g:surround_{char2nr('-')} = "<% \r %>"
    au FileType eruby let g:surround_{char2nr('=')} = "<%= \r %>"
  augroup END

  augroup php
    au!

    au BufWritePre *.php call StripTrailing()
  augroup END

  augroup python
    au!

    autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
  augroup END
endif
" }}}
" Functions {{{
" thanks to http://vimcasts.org/e/4
function! StripTrailing()
  let previous_search=@/
  let previous_cursor_line=line('.')
  let previous_cursor_column=col('.')
  %s/\s\+$//e
  let @/=previous_search
  call cursor(previous_cursor_line, previous_cursor_column)
endfunction

" Super Awesome fold text taken from @sjl
function! MyFoldText() " {{{
    let line = getline(v:foldstart)

    let nucolwidth = &fdc + &number * &numberwidth
    let windowwidth = winwidth(0) - nucolwidth - 3
    let foldedlinecount = v:foldend - v:foldstart

    " expand tabs into spaces
    let onetab = strpart('          ', 0, &tabstop)
    let line = substitute(line, '\t', onetab, 'g')

    let line = strpart(line, 0, windowwidth - 2 -len(foldedlinecount))
    let fillcharcount = windowwidth - len(line) - len(foldedlinecount)
    return line . '…' . repeat(" ",fillcharcount) . foldedlinecount . '…' . ' '
endfunction " }}}
set foldtext=MyFoldText()

function! RemoveRubyEval() range
  let begv = a:firstline
  let endv = a:lastline
  normal Hmt
  set lz
  execute ":" . begv . "," . endv . 's/\s*# \(=>\|!!\).*$//e'
  normal 'tzt`s
  set nolz
  redraw
endfunction

function! SearchDash()
  let s:browser = "/usr/bin/open"
  let s:wordUnderCursor = expand("<cword>")

  " Get the filetype (everything after the first ., for special cases
  " such as index.html.haml or abc.css.scss.erb)
  let s:fileType = substitute(expand("%"),"^[^.]*\.","",1)

  " Match it and set the searchType
  if match(s:fileType, "js") != -1
    let s:searchType = "js:"
  elseif match(s:fileType, "css") != -1
    let s:searchType = "css:"
  elseif match(s:fileType, "html") != -1
    let s:searchType = "html:"
  elseif match(s:fileType, "rb") != -1
    let s:searchType = "rb:"
  elseif match(s:fileType, "php") != -1
    let s:searchType = "php:"
  elseif match(s:fileType, "py") != -1
    let s:searchType = "python:"
  else
    let s:searchType = ""
  endif

  " Run it
  let s:url = "dash://".s:searchType.s:wordUnderCursor
  let s:cmd ="silent ! " . s:browser . " " . s:url
  execute s:cmd
  redraw!
endfunction
" }}}
" Keybindings {{{
" Unite keybindings
"nnoremap <D-t> :Unite -buffer-name=files file_rec/async:!<cr>
" nnoremap <leader>aa :Unite -no-quit -buffer-name=search grep:.<cr>

" nnoremap <space><space> :Unite -toggle -auto-resize -buffer-name=mixed file_rec/async buffer file_mru bookmark<cr>
" nnoremap <space>r :Unite -toggle -auto-resize -buffer-name=files file_mru<cr>
" nnoremap <space>y :Unite -buffer-name=yanks history/yank<cr>
" nnoremap <space>l :Unite -auto-resize -buffer-name=line line<cr>
" nnoremap <space>b :Unite -auto-resize -buffer-name=buffers buffer<cr>
" nnoremap <space>m :Unite -auto-resize -buffer-name=mappings mapping<cr>
" nnoremap <space>s :Unite -quick-match buffer<cr>
" nnoremap <space>w :Unite -buffer-name=watson_current watson/current_file<CR>
" nnoremap <space>d :Unite -buffer-name=watson_dirty watson/dirty<CR>


" vim-test runner commands
nnoremap <silent> <leader>tt :TestNearest<CR>
nnoremap <silent> <leader>tf :TestFile<CR>
nnoremap <silent> <leader>ta :TestSuite<CR>
nnoremap <silent> <leader>tl :TestLast<CR>

" For fast and east bundler installing
nnoremap <Leader>pi :PlugInstall<cr>

" Show TagBar
nnoremap <Leader>ts :TagbarOpenAutoClose<CR>

" Show CtrlP with Tag search
" nnoremap <leader>. :CtrlPTag<CR>

" Shortcut to rapidly toggle `set list`
nnoremap <leader>lt :set list!<CR>

" Quickly show a blame of the current file
nnoremap <leader>gb :Gblame<CR>
" Quickly show a diff of the current file
nnoremap <leader>gd :Gdiff<CR>

" WTF vim?
map j gj
map k gk

" Quick, vertical 'goto file' (gf) to compliment <c-w>f (horizontal split)
nnoremap <leader>f :vertical botright wincmd f<CR>

" 'Bubble' the text up or down a line
" These bindings require @tpope's unimpaired plugin
nmap <D-Up> [e
nmap <D-Down> ]e

nnoremap <s-tab> <<
nnoremap <tab> >>
vnoremap <s-tab> <gv
vnoremap <tab> >gv

nnoremap <leader><space> :nohlsearch<CR>

nnoremap <space><space> za
vnoremap <space><space> za

" To enforce good habits...
map <Left> <Nop>
map <Right> <Nop>
map <Up> <Nop>
map <Down> <Nop>

" Vim-Easy-Align
vnoremap <silent> <Enter> :EasyAlign<Enter>

" Quick access to vimrc for on-the-fly customizations
nmap <leader>rc :tabedit $MYVIMRC<CR>

" Make switching tabs less shitty
nnoremap <leader>k :tabn<CR>
nnoremap <leader>j :tabp<CR>

"nmap <leader>ss :%s/\s\+$//<CR><CR>``

" Search and replace current word under cursor
"noremap <Leader>sw :%s/\<<C-r><C-w>\>//g<Left><Left>

map <leader>n :NERDTreeToggle<CR>
map <leader>/ <plug>NERDCommenterToggle<CR>
imap <leader>/ <esc><plug>NERDCommenterToggle<CR>

" Replace native f behavior with vim-sneak
map f <Plug>Sneak_s
map F <Plug>Sneak_S

" Easier multi-pane commands
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

nnoremap <C-D-j> <C-w>J
nnoremap <C-D-k> <C-w>K
nnoremap <C-D-h> <C-w>H
nnoremap <C-D-l> <C-w>L

" Force tab cycling when popup menu is visible (ex. deoplete suggestions)
inoremap <silent><expr> <tab>
  \ pumvisible() ? "\<C-n>" : "\<tab>"

inoremap <silent><expr> <S-tab>
  \ pumvisible() ? "\<C-p>" : "\<S-tab>"

" pretty format json in the buffer
nnoremap <leader>fj :%!python -m json.tool<CR>

" quick open new file based on current buffer
map <leader>e :e <C-R>=expand("%:p:h") . "/" <CR>

" bind K to grep word under cursor
nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

" uppercase/lowercase a word
nmap <leader>uc mQviwU`Q
nmap <leader>lc mQviwu`Q

" Limelight toggle
nmap <leader>h :Limelight!!0.8<CR>

" Dash searching integration
map <leader>d :call SearchDash()<CR>

" Just like...save ok
nnoremap <leader>w :w<CR>

" VERY MAGIC EVERYWHERE
nnoremap / /\v
cnoremap %s/ %s/\v
" }}}
