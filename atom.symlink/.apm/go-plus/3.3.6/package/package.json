{"name":"go-plus","description":"Adds `gocode`, `gofmt`, `goimports`, `go vet`, `golint`, `go build` and `go test` functionality for the go language.","keywords":["go","golang","gofmt","format","fmt","goimports","gocode","vet","go fmt","go vet"],"version":"3.3.6","main":"./lib/go-plus","license":"Apache-2.0","engines":{"atom":">=0.177.0","node":"*"},"author":{"name":"Joe Fitzgerald","email":"jfitzgerald@gopivotal.com","url":"http://github.com/joefitzgerald"},"homepage":"https://atom.io/packages/go-plus","repository":{"type":"git","url":"https://github.com/joefitzgerald/go-plus.git"},"bugs":{"url":"https://github.com/joefitzgerald/go-plus/issues"},"dependencies":{"async":">=0.9.0","atom-message-panel":"git+https://github.com/joefitzgerald/atom-message-panel.git#go-plus","emissary":"1.x","event-kit":">=0.8.1","fs-plus":"2.x","glob":">=4.0.6","temp":">=0.8.1","underscore-plus":"1.x"},"devDependencies":{"coffeelint":">=1.8.1"},"providedServices":{"autocomplete.provider":{"versions":{"2.0.0":"provide"}}},"readme":"# go-plus – Improved Go Experience In Atom\n\n[![Gitter](https://badges.gitter.im/Join Chat.svg)](https://gitter.im/joefitzgerald/go-plus?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n[![OSX Build Status](https://travis-ci.org/joefitzgerald/go-plus.svg?branch=master)](https://travis-ci.org/joefitzgerald/go-plus)\n[![Windows Build status](https://ci.appveyor.com/api/projects/status/d0cekvaprt9wo1et)](https://ci.appveyor.com/project/joefitzgerald/go-plus)\n\n## Installing\n\n1. Install `autocomplete-plus`: `apm install autocomplete-plus` or open Atom and go to `Preferences > Packages`, search for `autocomplete-plus`, and install it\n1. Install `go-plus`: `apm install go-plus` or open Atom and go to `Preferences > Packages`, search for `go-plus`, and install it\n\n## Overview\n\nThis package adds extra Atom functionality for the go language:\n\n* Autocomplete using `gocode` (you _must_ have the `autocomplete-plus` package installed for this to work)\n* Formatting source using `gofmt`\n* Formatting and managing imports using `goimports`, `goreturns`, or `gofmt`\n* Code quality inspection using `go vet`\n* Linting using `golint`\n* Syntax checking using `go build` and `go test`\n* Display of test coverage using `go test -coverprofile`\n\n## Example\n\n![A screenshot of go-plus in action](http://cl.ly/image/392z2L0f0E41/go-plus-example.gif)\n\n## Platforms\n\nThe package is currently known to work on OS X, Windows (7+) and Ubuntu. CI jobs exist for OS X and Windows; Ubuntu CI is still in-progress.\n\n## Configuration\n\n### Defaults\n\n| Display Name                            | Name                                        | Default     | Description                                                                                                                                                                                                                            |\n|:----------------------------------------|:--------------------------------------------|:------------|:---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Environment Overrides Config            | `go-plus.environmentOverridesConfiguration` | `true`      | Use the environment's value for GOPATH (if set) instead of the configured value for GOPATH (below)                                                                                                                                     |\n| GOPATH                                  | `go-plus.goPath`                            | `unset`     | You should set your GOPATH in the environment, and launch Atom using the `atom` command line tool; if you would like to set it explicitly, you can do so here (e.g. ~/go)                                                              |\n| Go Installation Path                    | `go-plus.goInstallation`                    | `unset`     | You should not normally set this; if you have a non-standard go installation path and `go` is not available on your PATH, you can use this to configure the location to `go` (e.g. /usr/local/othergo/bin/go or c:\\othergo\\bin\\go.exe) |\n| Run Format Tool On Save                 | `go-plus.formatOnSave`                      | `true`      | Run the configured format tool each time a file is saved                                                                                                                                                                               |\n| Format Tool                             | `go-plus.formatTool`                        | `goimports` | Choose one: goimports, goreturns, or gofmt                                                                                                                                                                                             |\n| Format Arguments                        | `go-plus.formatArgs`                        | `-w -e`     | `-w` will always be used; you can specify additional arguments for the format tool if desired                                                                                                                                          |\n| Run Lint Tool On Save                   | `go-plus.lintOnSave`                        | `true`      | Run `golint` each time a file is saved                                                                                                                                                                                                 |\n| Lint Arguments                          | `go-plus.golintArgs`                        | `unset`     | Arguments to pass to `golint` (these are not usually needed)                                                                                                                                                                           |\n| Run Coverage Tool On Save               | `go-plus.runCoverageOnSave`                 | `false`     | Run `go test -coverprofile` each time a file is saved                                                                                                                                                                                  |\n| Run Syntax Check On Save                | `go-plus.syntaxCheckOnSave`                 | `true`      | Run `go build` / `go test` each time a file is saved                                                                                                                                                                                   |\n| Run Vet Tool On Save                    | `go-plus.vetOnSave`                         | `true`      | Run `go vet` each time a file is saved                                                                                                                                                                                                 |\n| Vet Arguments                           | `go-plus.vetArgs`                           | `unset`     | Arguments to pass to `go vet` (these are not usually needed)                                                                                                                                                                           |\n| Automatically Get Missing Tools         | `go-plus.getMissingTools`                   | `true`      | Run `go get -u` to retrieve any tools that are required but not currently available in the go tool directory, the PATH, or your GOPATH                                                                                                 |\n| Show Message Panel                      | `go-plus.showPanel`                         | `true`      | Show the go-plus message panel to provide information about issues with your source                                                                                                                                                    |\n| Show Message Panel When No Issues Exist | `go-plus.showPanelWhenNoIssuesExist`        | `false`     | Show the go-plus message panel even when no issues exist                                                                                                                                                                               |\n\n### Detection Of Your Go Installation\n\nThe package will search the following locations (in order) for a `go` executable:\n\n* All directories specified in the PATH environment variable\n* OS X: `/usr/local/go/bin` (package installer)\n* OS X: `/usr/local/bin` (Homebrew)\n* Windows: `C:\\go\\bin` (package installer)\n* Windows: `C:\\tools\\go\\bin` (Chocolatey)\n\nIf you have go installed somewhere else, and *not available on the path*, specify the full path to the go executable in the `Go Installation` preference.\n\n### GOPATH\n\nLove it or hate it, `GOPATH` is very important in `go` land.\n\nSyntax checking requires a valid `GOPATH` for the files you are checking. You\ncan set your `GOPATH` using one of two mechanisms:\n\n* Using the environment: set the `$GOPATH` environment variable to the correct\n  value\n* Using `go-plus` preferences: set the `Go Path` preference\n\nThe environment (if set) is preferred over the `Go Path` preference by default.\nYou can change this by updating the `Environment Overrides Configuration`\npreference.\n\nThe most common reason `GOPATH` might not be set in the environment is due to the\nway OS X launches processes. When you launch Atom via processes created by\n`launchd` (e.g. using Finder, the Dock, or Spotlight) it likely will not have\naccess to your `$GOPATH` if you set it in your shell initialization files (e.g.\n`.bash_profile`, `.bashrc`, `.zshrc`, etc).\n\nConsider launching Atom via your shell – using the Atom Shell Commands – where\nAtom should inherit your environment. Alternatively, try one of the suggestions\nat http://apple.stackexchange.com/a/87283 to set the `GOPATH` for processes\nlaunched by `launchd` (and their children, which will include Atom).\n\nSetting the `Go Path` preference will ensure that you have a sensible fallback\nfor GOPATH if you have launched Atom without the `$GOPATH` environment variable\nset.\n\nIf both the `Go Path` preference and the `$GOPATH` / `%GOPATH%` environment variable are\nempty, `go-plus` will display a warning and will not perform `go build` / `go\ntest` powered syntax checking.\n\n## Planned Features\n\nThe following features will be added soon:\n\n* `go oracle` / `godef` integration ([#11](https://github.com/joefitzgerald/go-plus/issues/11))\n* `godoc` integration ([#12](https://github.com/joefitzgerald/go-plus/issues/12))\n* ... and others: https://github.com/joefitzgerald/go-plus/issues\n\n\n## Troubleshooting\n\n### Missing Tools\n\n> <b>Question:</b> Why are some of the tools found, not `cover`, `goimports`, or `vet`?\n\n> <b>Answer:</b> Do you have Mercurial Installed?\n\nMany `go` tools live at https://code.google.com/p/go.tools. This repository is a Mercurial repository. If you have the `Get Missing Tools` option enabled, `go-plus` will attempt to install required tools from this repository. If you do not have Mercurial (`hg`) installed, `go-plus` will not succeed in installing `cover`, `goimports`, or `vet`.\n\nTo resolve issues installing cover or vet, install Mercurial:\n\n* OS X: Run `brew install mercurial`\n* Windows + Others: http://mercurial.selenic.com/wiki/Download\n\n### GOPATH\n\n> <b>Question:</b> Why can't Atom see my GOPATH? I have set it and I see it in terminal?\n\n> <b>Answer:</b> Did You Launch Atom Using The Shell Command?\n\n(From Above):\n\nThe most common reason `GOPATH` might not be set in the environment on OS X is due to the way OS X launches processes. When you launch Atom via processes created by `launchd` (e.g. using Finder, the Dock, or Spotlight) it likely will not have access to your `$GOPATH` if you set it in your shell initialization files (e.g. `.bash_profile`, `.bashrc`, `.zshrc`, etc).\n\nConsider launching Atom via your shell – using the Atom Shell Commands – where Atom should inherit your environment. Alternatively, try one of the suggestions at http://apple.stackexchange.com/a/87283 to set the `GOPATH` for processes launched by `launchd` (and their children, which will include Atom).\n\n### Still Having Issues?\n\nIf you are having issues and the information above isn't helping, feel free to create an issue at https://github.com/joefitzgerald/go-plus/issues. When you create the issue, please be sure to paste the information from `Packages > Go Plus > Display Go Information` to help us form a response that is targeted to your situation. This looks something like:\n\n```\nGo: go1.3.3 darwin/amd64 (@/usr/local/bin/go)\nGOPATH: /Users/jfitzgerald/go\nCover Tool: /usr/local/Cellar/go/1.3.3/libexec/pkg/tool/darwin_amd64/cover\nVet Tool: /usr/local/Cellar/go/1.3.3/libexec/pkg/tool/darwin_amd64/vet\nFormat Tool: /Users/jfitzgerald/go/bin/goimports\nLint Tool: /Users/jfitzgerald/go/bin/golint\nGit: /usr/bin/git\nMercurial: /usr/local/Cellar/mercurial/3.1.2/bin/hg\nPATH: /Users/jfitzgerald/go/bin:/usr/local/bin:/Users/jfitzgerald/.rbenv/shims:/usr/local/bin:/usr/local/sbin:/Users/jfitzgerald/go/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/MacGPG2/bin:/usr/texbin\nAtom: 0.143.0 (darwin x64 14.0.0)\n```\n\n## Contributors\n\nA list of contributors can be found at https://github.com/joefitzgerald/go-plus/graphs/contributors. Joe Fitzgerald ([@joefitzgerald](https://github.com/joefitzgerald)) is the maintainer of this project.\n\n## Contributing\n\nContributions are greatly appreciated. Please fork this repository, make your\nchanges, and open a pull request. See [Contributing](https://github.com/joefitzgerald/go-plus/wiki/Contributing) for detailed instructions.\n","readmeFilename":"README.md","_id":"go-plus@3.3.6","_shasum":"8c7a995c51658a0b1d3168582049dd7b30d0385b","_resolved":"file:../d-11538-69726-19r87uh/package.tgz","_from":"../d-11538-69726-19r87uh/package.tgz"}