{
  "name": "StringScanner",
  "description": "StringScanner performs lexical scanning operations on a string.",
  "author": {
    "name": "Michael Ficarra"
  },
  "version": "0.0.3",
  "homepage": "http://github.com/michaelficarra/cjs-string-scanner",
  "main": "./lib/StringScanner",
  "directories": {
    "lib": "./lib"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/michaelficarra/cjs-string-scanner.git"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/michaelficarra/cjs-string-scanner/raw/master/LICENSE"
    }
  ],
  "engines": {
    "node": ">=0.6"
  },
  "keywords": [
    "StringScanner",
    "string",
    "scanner",
    "ruby",
    "lex",
    "lexer",
    "lexical",
    "analysis",
    "token",
    "tokenize",
    "tokenizer"
  ],
  "readme": "StringScanner\n=============\n\nStringScanner performs lexical scanning operations on a string.\nInspired by [Ruby's StringScanner class](http://www.ruby-doc.org/stdlib-1.9.3/libdoc/strscan/rdoc/StringScanner.html)\n\n\nHow To Use\n----------\n\nInstantiate a new `StringScanner` by passing its constructor the string to scan.\n\n    var StringScanner = require(\"StringScanner\");\n    var ss = new StringScanner(\"abc123 def456\");\n    // #<StringScanner 0/13 @ \"abc12...\">\n\nFor the following examples, `ss` represents the `StringScanner` instance\ndefined above.\n\n### bol / beginningOfLine\nReturns `true` if the scan pointer is at the beginning of a line (right after\n`\\n`) or the beginning of the string, `false` otherwise.\n\n    ss.reset()    // #<StringScanner 0/13 @ \"abc12...\">\n    ss.pointer()  // 0\n    ss.bol()      // true\n    ss.scan(/./)  // \"a\"\n    ss.pointer()  // 1\n    ss.bol()      // false\n\n### captures\nReturns an Array containing the contents of the capturing groups in the last\nevaluated pattern match.\n\n    ss.reset()              // #<StringScanner 0/13 @ \"abc12...\">\n    ss.check(/.*(..) (..)/  // \"abc123 de\"\n    ss.captures()           // [\"23\",\"de\"]\n    ss.check(/\\w+/)         // \"abc123\"\n    ss.captures()           // []\n    ss.check(/\\s+/)         // null\n    ss.captures()           // []\n\n\n### check(pattern)\n*Note: this method alters last match results*\n\nChecks if a `scan` of the given pattern would succeed without advancing the\nscan pointer. Returns the portion of the string matched on successful match,\n`null` otherwise.\n\n    ss.reset()           // #<StringScanner 0/13 @ \"abc12...\">\n    ss.check(/[a-z]+/i)  // \"abc\"\n    ss.check(/[a-z]+/i)  // \"abc\"\n    ss.scan(/[a-z]+/i)   // \"abc\"\n    ss.check(/[a-z]+/i)  // null\n    ss.check(/[\\d\\s]+/)  // \"123 \"\n\n### checkUntil(pattern)\n*Note: this method alters last match results*\n\nChecks if a `scanUntil` would succeed without advancing the scan pointer.\nReturns the portion of the string being scanned from the scan pointer to the\nend of the matched string on successful match, `null` otherwise.\n\n    ss.reset()           // #<StringScanner 0/13 @ \"abc12...\">\n    ss.checkUntil(/\\s/)  // \"abc123 \"\n    ss.checkUntil(/\\s/)  // \"abc123 \"\n    ss.checkUntil(/r/)   // null\n    ss.scanUntil(/e/)    // \"abc123 de\"\n    ss.checkUntil(/\\s/)  // null\n\n### clone / dup\nCreates a duplicate of this instance of `StringScanner`.\n\n### concat(str)\nAppends the given string to the string being scanned.\n\n    ss.reset()            // #<StringScanner 0/13 @ \"abc12...\">\n    ss.checkUntil(/h/)    // null\n    ss.concat(\" ghi789\")  // #<StringScanner 0/20 @ \"abc12...\"\n    ss.checkUntil(/h/)    // \"abc123 def456 gh\"\n\n### eos / endOfString\nReturns `true` if the scan pointer is at the end of the string being scanned,\n`false` otherwise.\n\n    ss.reset()     // #<StringScanner 0/13 @ \"abc12...\">\n    ss.pointer()   // 0\n    ss.eos()       // false\n    ss.scan(/.*/)  // \"abc123 def456\"\n    ss.pointer()   // 13\n    ss.eos()       // true\n\n### exists(pattern) / exist(pattern)\n*Note: this method alters last match results*\n\n*Warning: this method may return `0` on a successful operation. Use `===`\ncomparision to `null` for failure check, for example: `ss.exists(/a/i)===null`*\n\nChecks if the given pattern matches anywhere after the current scan pointer.\nThis will determine if a `scanUntil` operation will succeed.  Returns the\nnumber of characters between the scan pointer and the position in which the\nmatch was found on success, `null` otherwise.\n\n    ss.reset()\n    // ----\n    ss.exists(/c/)   // 2\n    ss.match()       // \"c\"\n    ss.matched()     // true\n    // ----\n    ss.exists(/a/)   // 0\n    ss.match()       // \"a\"\n    ss.matched()     // true\n    // ----\n    ss.exists(/b*/)  // 0\n    ss.match()       // \"\"\n    ss.matched()     // true\n    // ----\n    ss.exists(/m/)   // null\n    ss.match()       // null\n    ss.matched()     // false\n\n### getch / getChar\n*Note: this method alters last match results*\n\n*Note: Ruby equivalent: `get_byte`*\n\n`scan`s one character and returns it; exactly equivalent to `scan(/./)`.\n\n    ss.reset()    // #<StringScanner 0/13 @ \"abc12...\">\n    ss.getch()    // \"a\"\n    ss.reset()    // #<StringScanner 0/13 @ \"abc12...\">\n    ss.scan(/./)  // \"a\"\n\n### match\n*Note: Ruby equivalent: `matched`*\n\nReturns the last string matched or `null` if the last attempted match failed.\n\n    ss.reset()           // #<StringScanner 0/13 @ \"abc12...\">\n    ss.scan(/[a-z]+/i)   // \"abc\"\n    ss.match()           // \"abc\"\n    ss.check(/[a-z]+/i)  // null\n    ss.match()           // null\n\n### matches(pattern)\n*Note: Ruby equivalent: `match?`*\n\nChecks if a scan of the given pattern would succeed without advancing the scan\npointer. Returns the length of the string matched on successful match, `null`\notherwise.\n\n    ss.reset()             // #<StringScanner 0/13 @ \"abc12...\">\n    ss.matches(/[a-z]+/i)  // 3\n    ss.matches(/[a-z]+/i)  // 3\n    ss.scan(/[a-z]+/i)     // \"abc\"\n    ss.matches(/[a-z]+/i)  // null\n    ss.matches(/[\\d\\s]+/)  // 4\n\n### matched\n*Note: Ruby equivalent: `matched?`*\n\nReturns `true` if the last attempted match was successful, `false` otherwise.\n\n    ss.reset()      // #<StringScanner 0/13 @ \"abc12...\">\n    ss.scan(/\\w+/)  // \"abc123\"\n    ss.matched()    // true\n    ss.scan(/\\w+/)  // null\n    ss.matched()    // false\n\n### matchSize\n*Warning: this method may return `0` on a successful operation. Use `===`\ncomparision to `null` for failure check, for example: `ss.matchSize()===null`*\n\nReturns the length of the most recently matched string if the most recent match\nattempt succeeded, `null` otherwise.\n\n    ss.reset()       // #<StringScanner 0/13 @ \"abc12...\">\n    ss.scan(/\\w+/)   // \"abc123\"\n    ss.matchSize()   // 6\n    ss.check(/\\w*/)  // \"\"\n    ss.matchSize()   // 0\n    ss.check(/\\w+/)  // null\n    ss.matchSize()   // null\n\n### peek(len)\nReturns *len* characters after the scan pointer, or the rest of the string,\nwhichever is shorter.\n\n    ss.reset()      // #<StringScanner 0/13 @ \"abc12...\">\n    ss.scan(/.*d/)  // \"abc123 d\"\n    ss.peek(3)      // \"ef4\"\n    ss.peek(9001)   // \"ef456\"\n    ss.peek(0)      // \"\"\n    ss.peek(-3)     // \"\"\n\n### pointer / position\nReturns the scan pointer position as an integer.\n\n    ss.reset()            // #<StringScanner 0/13 @ \"abc12...\">\n    ss.pointer()          // 0\n    ss.scan(/\\w+\\d+\\s+/)  // \"abc123 \"\n    ss.pointer()          // 7\n    ss.scan([a-z]+)       // \"def\"\n    ss.pointer()          // 10\n\n### setPointer(pos)\nManually move the scan pointer to *pos* characters from the beginning of the\nstring. The scan pointer is bounded between zero and the scanning string's\nlength. Returns the position to which the scan pointer was moved. `setPointer`\nneither resets nor modifies the last match results.\n\n    ss.reset()         // #<StringScanner 0/13 @ \"abc12...\">\n    ss.setPointer(4)   // 4\n    ss.scan(/\\d+/)     // \"23\"\n    ss.pointer()       // 6\n    ss.setPointer(-4)  // 0\n    ss.setPointer(99)  // 13\n\n### reset\nMoves the scan pointer back to the beginning of the string being scanned and\nclears the last match results.\n\n    ss.reset()            // #<StringScanner 0/13 @ \"abc12...\">\n    ss.scanUntil(/(\\s)/)  // \"abc123 \"\n    ss.pointer()          // 7\n    ss.match()            // \"abc123 \"\n    ss.captures()         // [\" \"]\n    ss.reset()            // #<StringScanner 0/13 @ \"abc12...\">\n    ss.pointer()          // 0\n    ss.match()            // null\n    ss.captures()         // []\n\n### rest\nReturns the portion of the string being scanned after the scan pointer.\n\n    ss.reset()          // #<StringScanner 0/13 @ \"abc12...\">\n    ss.scanUntil(/\\s/)  // \"abc123 \"\n    ss.rest()           // \"def456\"\n\n### scan(pattern)\n*Note: this method alters last match results*\n\nAttempts to match the given pattern at the position of the scan pointer.\nReturns the matched string and advances the string pointer upon successful\nmatch. A failed match will result in a `null` value being returned.\n\n    ss.reset()         // #<StringScanner 0/13 @ \"abc12...\">\n    ss.scan(/[a-z]+/)  // \"abc\"\n    ss                 // #<StringScanner 3/13 @ \"abc12...\">\n    ss.scan(/[a-z]+/)  // null\n    ss                 // #<StringScanner 3/13 @ \"abc12...\">\n    ss.scan(/[0-9]+/)  // \"123\"\n    ss                 // #<StringScanner 6/13 @ \"abc12...\">\n\n### scanUntil(pattern)\n*Note: this method alters last match results*\n\nAttempts to match the pattern against the string being scanned. On a successful\nmatch, the scan pointer is advanced to the end of the matched portion of the\nstring and the portion of the string being scanned up to and including the\nmatched string is returned. On a failed match, `null` is returned.\n\n    ss.reset()         // #<StringScanner 0/13 @ \"abc12...\">\n    ss.scanUntil(/ /)  // \"abc123 \"\n    ss.scanUntil(/f/)  // \"def\"\n    ss.scanUntil(/f/)  // null\n\n### skip(pattern)\n*Note: this method alters last match results*\n\nPerforms a `scan`, returning the length of the matched string on successful\nmatch, `null` otherwise.\n\n    ss.reset()         // #<StringScanner 0/13 @ \"abc12...\">\n    ss.skip(/[a-z]+/)  // 3\n    ss.skip(/[a-z]+/)  // null\n    ss.skip(/[0-9]+/)  // 3\n\n### skipUntil(pattern)\n*Note: this method alters last match results*\n\nPerforms a `scanUntil`, returning the length of the matched string on\nsuccessful match, `null` otherwise.\n\n    ss.reset()         // #<StringScanner 0/13 @ \"abc12...\">\n    ss.skipUntil(/ /)  // 7\n    ss.skipUntil(/f/)  // 3\n    ss.skipUntil(/f/)  // null\n\n### string\nReturns the entire string being scanned.\n\n    ss.string()  // \"abc123 def456\"\n    ss.getch()   // \"a\"\n    ss.string()  // \"abc123 def456\"\n\n### terminate / clear\nAdvances the scan pointer to the end of the string being scanned and resets the\nlast match results.\n\n    ss.reset()      // #<StringScanner 0/13 @ \"abc12...\">\n    ss.getch()      // \"a\"\n    ss.pointer()    // 1\n    ss.terminate()  // #<StringScanner fin>\n    ss.pointer()    // 13\n    ss.eos()        // true\n    ss.match()      // null\n\nKnown Issues\n------------\n\nNot really an issue, but `StringScanner` assumes the global flag (g) is\ndisabled on any RegExp objects passed as patterns to any of its methods. If the\nglobal flag is enabled, `StringScanner` may produce unexpected results.\n\nAdditional Info\n---------------\n\nI am always open for feature requests or any feedback.  I can be reached at\n[Github](http://github.com/michaelficarra).\n\nThanks to the Ruby community for the original idea and implementation.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/michaelficarra/cjs-string-scanner/issues"
  },
  "_id": "StringScanner@0.0.3",
  "_from": "StringScanner@>=0.0.3 <0.1.0"
}
